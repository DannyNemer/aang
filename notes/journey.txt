** The file serves as a log of the development process, but was created over 2 years after I began working toward this by any measure. Previous comments by me are scattered throughout several other files that I will merge here later. This file is meant to demonstrate the difficulty of the process and what I learned.

- Ending working on recreating the grammar. I never built a functional prototype. Several rules are missing, and did not perfect rule, semantic generation, display text generation, string edit costs, edit rules (I have too many), and disambiguation. But I understand 99.9% of it, and the reasons for every design choice. There is some inconsistency amongst rules, but I understand it so well that I can make my own choices.
- While making my grammar, I can go back to the previous grammar and adopt my new code to check that it works - especially the parser. The few things I have not solved, like how to use insertion costs of terms in portions of larger term symbols, and few display text rules and semantic function placement, I hope to solve by after gaining more knowledge through this process.
- Work on the new grammar, codename aang, will be very slow and careful. Code will be modular, well-commented, optimized, and committed frequently.

- I am scared about designing the culture. I know it is the most important part. It determines success. It establishes the processes and priorities that that company will, often unknowingly, follow and make all decisions. For me to implement it best, thoroughly and consistently, it must be an extension of my own character. Then, it flow naturally and always. Therefore, I must strive to make an ideal version of myself. My first principles, value system, work ethic, virtues, habits.
- There needs to be documented processes, like Apple. Rules from behavior (like rules.txt). Everything is thought throughout: workspace, meetings, formality vs informality, tone. Will need to inspire passion, but not deter. Will need brutal honesty without hurt feelings. Complete trust.

- My startup will succeed not because of tech or design, but because of culture. My passion, work ethic, character, care for doing the best and being the best will succeed. Virtue.

- I just stop when I realize how fast technology is evolving, and can see the acceleration. Mind blowing. More was accomplished in last 100 years than previous 500 years. And when you think about material intelligence, we are all getting smarter. And the population is growing, and the people with access to education and resources are growing. The next ten years will be unfathomable. Indeed, incredibly good: living standard rise, diseases cured, children fed, sick treated, access to infrastructure such as plumbing and transpiration, stable governments, etc. While not adjective can sufficiently describe the enormity of this good, my mind is stalled by the difficulty to comprehend such magnitude of velocity of change (velocity's direction: good).

- Bret Victor's Bio (see more): Yet I sought, and I thought, and I pursued my own path. And with time, I was enlightened. The True Way transcends the minutia of Skill. There is no "Technology". There is no "Design". There is only a version of how mankind should be, and the relentless resolve to make it so. The rest is details. This is the Way that I teach.

- It may not be a way to search an enterprise's store of email and files (Slack does that). It make not be a search engine for structured date: financial + market data (people don't really do that). It needs to be something I want now, like how I wanted Slack. I want it to search Twitter, for one. I might discover other applications later, too.
- I will do, as Gruber describes Apple: That’s how they develop products: come up with a slew of ideas, try the ideas that seem best, iterate and refine and change (narrowing focus) until they get to something that feels right.
- I will get the grammar + parser + search-index working, and try a lot things. Twitter, Dropbox, email, Wikidata, personal productivity (e.g., reminders), Github. I will find more. Maybe I'll have SJ's moment when he looked at the multi-touch display with inertia scroll and said, "Wow. We can make a phone out of this. So we put the tablet project on the shelf."
- It's a new interface. iPhone's email and Maps were obviously better than existing, but Maps was the last application made before the keynote (then YouTube app before launch).

- When people half way around the world are praying. Praying for the drought to end so they can feed their children. Praying that disease that killed their father doesn't kill their mother. They aren't praying for their god to help. They are praying for us to help. We all can be angels. We all can be heroes. This is what I knew I wanted to do with my life since I was 16. I knew would work harder than anyone else, and study more than anyone else, to accrue the resources necessary to do good on a mass scale. I'm good at business, engineering, and design so that I may do this. This is what I have always wanted to do with my life. The rest is a means to this end.

- Haptic trackpad required 20 years of research to invent the tech AND huge engineering effort within Apple to innovate a product. Need both!

- Keep removing features until it is brain-dead simple; like Picasso's bull.

- Draw on latent powers of humans. Not using them is inhumane. Use all capabilities. Seeing Bret's Humane Representation of Thought

- Next I want to do a smart, dynamic calendar and to-do productivity application. You give short- and long-term to-dos, and provide restrings: laundry every other week, requires being at home, can do other stuff while laundry is running; learn Chinese in 1 year by practicing 1 hours a day, read 1-2 hours a day, but prefer in morning; finish X by tomorrow, start today, requires 2-5 hours; eat 3 meals, scheduled throughout day. What adjustments can I be made to sleep and extra hour? Account for walking back from library. I want to slit my work on X in half during day.
- I want to do this so bad. Such an easy, obvious user interface. The suggestions are definitive. Instantly helpful.
- In contrast, at this moment, I see no application or interest of this NLI. All I can think of is searching for specific things: an email, a tweet. Rare instances, and I always end up finding them.
- I don't need the dynamic calendar either. I can do it all in my head just fine.
- This is hard. Every problem I think I have (e.g., tracking location, dynamic calendaring, searching for something) I can do already now, in a slightly slower way. I would use them, they would solve a problem, and they would be incredible products with rigorously thought-through design. Yet, I'm no confident in them.
- These sound like Marco Arment's work: Instapaper (save reading for later), Overcast (better podcast player). Both good, used by him, solve a problem, and with a healthy user base providing sustainable income. But they aren't capable of growing into a large organization. What does?
- Slack fits those characteristics (solves a problem by building a better designed product, nothing else compares, creator wants for himself). Difference is the communication is valuable. You can create equally great, useful, better-than-market products, but they aren't doing valuable jobs.
- PG says build something a few people want really badly (depth). These all do this, but I don't see how they can expand. I didn't a better chat experience either (when I described a much better chat UI, with media embeds, better search, etc.), thought only I would like it, but was wrong.

- Design with this in mind: "pervasively direct-manipulation interfaces (where the user does his thing by moving and gesturing with meaningful objects, instead of relying on verb buttons and other indirect controls)" - Bret Vistor

- Refer to Bret Victor's work about how this is all about UI and design. http://worrydream.com/ABriefRantOnTheFutureOfInteractionDesign/

- I spent 40-50 hours making a k-best shift-reduce parser. It was incredibly difficult. Hours spent staring at the screen, pacing, talking it out, sketching. Extremely cognitively demanding. And I got it. It was a little slower than the previous version, however, I assumed it would be more efficient as the grammar becomes larger and I don't need to lose time parsing everything. And, the original parser parses everything (quicker), then must search top-down for the best trees (net slower).
- Problem: I don't think I can build the trees at all in this bottom-up (though, out of order) parsing. I'm losing time building trees that don't reach the start node (as opposed to starting from the start node, top-down, in the other parser). I might end up doing nearly also of the shift/reduce actions, as I find trees that fail semantically, or are semantically identical - properties that might not be seen until whole tree is parsed.
- Hence, might be faster to parse everything (already faster), and then just parse top-down.
- Is this lost time? At this crucial moment?! I could have built an entire app or service in that time! I learned a lot about the parser and state table. I mastered them, in fact. And I certainly increased my algorithm skills, intelligence, and confidence with this difficult task. Though, encountering this failed approach was necessary to discover the correct approach. It felt horrible. No one else could do this. No one else could go through all that I have, all of the failed attempts, and stick with it. Partly because of the time required. Primarily because of the enormous will power demanded.

 - I don't have control over all external influences on my success. I need not worry; only respond. Because I will pursue this no matter what. I simply respond because these forces exists and new ones will inevitably continuously arise.

- I like to fight. To oppose the stream. The alternative is to flow with the stream. Let it carry you. To succumb, and rest, and weaken, and become immaterial.

- It appears it will be the normal shift-reduce parser, which we've had for a month, and then a simple top-down parser. There are so many ways we can imagine saving time, but it appears to be so fast already. Why increase code complexity?

- Both can work. Either the breadth-first search parser, which is faster, followed by a top-down search; or, the bottom-up parser the generates results while parsing. I'm still unsure about the latter. The question is which is faster. As the grammar grows, the bottom-up parser might prove faster. Though, it very well might not be.

- So much of business is just about doing the best work. Anything else is laziness, cutting corners, and this is easy to spot.

- You were once of the best business minds, but lost it slightly without meaningful reading. The rest of the startup community reads all of the news, which you have recently taken too much to. Return to your previous greatness. Reaffirm why you cannot work for anyone, and must work alone. You, are one of the greats.

- "It's a product that couldn't exist without invention across many disciplines. (A full-size keyboard is) the most familiar, comfortable, and accurate typing platform." ~ Ive on MacBook
- Much language in the video applies here: "Deliberite", "Percision"

- Most personal and significant work of my life. To start, I am only sharing it with a few people while it is in its infancy.

- "The purpose of the wrist-mounted technology, what problems it might solve - that was something the Watch team would come up with slowly, during the process of inventing a bunch of new ways to interact with the device. But one thing was clear from the start: The Watch would succeed or fail on the strength of what's prosaically called the user interface."

- Still unsure whether to construct the parse forest with shift-reduce and then use Dijkstra's on the forest from the start node, or whether to use k-best shift-reduce to construct the parse forest while constructing trees. Is the latter even possible? I have concluded it is not.
- Reduced speed comes from insertion edits. Must optimize which to permit.

- I do not think I can convey to Buhler the magnitude of the work that went into it. The Semantic parsing alone is an enormous amount of work.

- I can design and write/rewrite this whole system on paper, and know when it will or won't work.

- Never think you are the only person who would use a product, or is the only person with your problem: mobile messaging, powerful desktop messaging application (i.e., Slack), continuous location tracking (i.e., Moves and whatever bigger comes later)

- God saw all that he had made, and it was very good.

- We had this idea to improve performance by removing conjugation operations on all instances except objective case, which can only be done at run time. This required making additional terminal rules that recognized the all the same terminal symbols, but accepted symbols specific to the case the rule is designed for. For example, '[like-past]' which recognizes the same terminal symbols as '[like]' but only accepts "liked". This, however, increased parse time.
- Then had this idea to decrease K-best search time by combining 1-1 rules in the parse forest before traversing the forest. This did not bear much improvement.
- Then we needed to change a rule for a specific semantic, replace '[of-poss-users+]' with '[of-poss-users]'. However, this significantly increased parse time. This demonstrated that there are certain rules that dramatically increase parse time, and I cannot determine which.
- Then, we also discovered that there are additional insertion edits we can make that can dramatically slow parse time, yet the same k-best rules are created without these edits. Hence, there should be a way to do parsing differently, to not work toward these trees that never bear.
- But, this optimization should come last. Work on the other stuff should be first.

- I'm afraid this is a sad note. From age 17-21, I was extraordinarily confident about my dreams and that I will achieve them. While I am not a genius, I believed I would succeed because of character. Because of virtue. I would work past the difficulties where others had quit. I would stand up to challenges, people, and forces where others had cowered. No decision would be difficult, because I would always do what is objectively good, right, and true.
- I suppose, now that I write this, it wasn't confidence in myself. Rather, confidence in this philosophy. Indeed, "Some rise by sin, and some by virtue fall". But I always believed good triumphed. Optimism always succeeds in the long run.
- These beliefs used to invigorate me. Absolutely light me up.
- I always feared when I grew older, I would one day wake up and find I have long lost this madness. This energy. That I had unknowingly settled.
- Honestly, it came from when I read. I didn't read much. I wasn't studying textbooks on physics or reading the history of great nations and leaders. Just reading articles. Though, insightful analytical articles. But I saw I was knowledgeable, and understood so much so well, and that I was capable.
- Now I have nothing. No fire. No confidence.
- My project will not work. While I can complete what I was building, and it dos something new, unique, and that demanded much effort, there is no business there. There is no good value proposition.
- I don't know what's coming. Or happening.
- I don't see this working.
- Patrick said it was I need to find an instance where people are already querying complex data. No one searched Facebook. I found uses for it, but not enough people did.
- Start with a problem. And I've got a solution. I read this, but I didn't KNOW this deep in my bones, such that I would be able to throw out so much.

- If we do apply somewhere, and we do use Aang, go through an enormous list of all the edge cases. Exhaust them with all of the examples.

- Unsure how can I do a paper. The graph search algorithm alone is a whole paper, with its unique semantic parsing and heuristic and forest reductions.

- I don't know. Paul Graham said to live at the bleeding edge and build something interesting (i.e., is missing)

- When Steven Sinofsky first saw Tanium software in action, he - along with the rest of a conference room full of Andreessen Horowitz partners - thought it was a trick. "It was too fast,"" says Sinofsky, who used to run Microsoft's Windows division. "To a person, we just assumed it was a mock-up. We asked how long it would take to build for real."
- "I'd never seen anything like it," Sinofsky says nearly a year later. "It was a wild, surreal experience. We all knew this space - or so we thought - super-, super-well." "How the f- did you do that?"
- Our system should be considered as fast relative to existing tech as Tanium is in its field.

- I wrote the following during the horrid time between the end of classes senior year and graduation, titled "Plan.txt":
1. Return to parent’s home in Michigan for a few weeks (i.e., I failed massively).
2. While there, finish remaining portions of my project and launch a website to host the project.
3. Use my project to demonstrate the following:
(a) Experience taking an ambitious idea from conception to final product by way of 1500+ hours of work (experience nearly nonexistent for undergraduates)
(b) Skill in building something difficult with little existing work for reference (which normally would require a team of experienced people)
(c) Full-stack engineering skills: algorithms, UI design, back-end servers, et cetera
4. Share the website with the (surprisingly small) community at the crux of the tech industry. (This is the same (Internet) community where Twitter, Uber, and all other big companies over the past 15 years began.)
5. As people use the website, add more features and lightly transform it to a Maccaw-style business. Set up a bank account, incorporate the company, integrate with Stripe for recurring payments, create a TOS, privacy policy, and other necessary pages.
6. Try to build a limited reputation for myself in the community. Everyone in this community - from CEOs to venture capitalists to writers to designers to scientists - all communicate over Twitter, Internet forums, and blogs.
7. Try to get a job at a startup in San Francisco, working with people I have admired for years. These companies have ≤ 5 employees, so when they use their limited capital to hire someone, they are betting their company on them. I need steps 2-6 because these guys don't simply hire college kids - they hire the best in the world.
8. While at this job, attain enormous experience and try to meet some of the amazing people whom I've admired from afar.
9. Refrain from waking up one day, realizing that I have settled, forgotten my childhood dreams, and am unknowingly bound to a life that would make childhood-me apoplectic.
10. After 2-4 years, try again.

- I wrote the following during the horrid graduation week:
	- Month of hell.
	- Wanted to end this.
	- Then decided to build a Maccaw-style service.
	- Devastating.
	- Should have known from the start.
	- No one works nearly as diligently as me, working 13 hours every day, arduously and nonstop. Never going out, eating meals with friends, or doing anything else.

- My vision of a calendar + task manager would be enormously successful, just as my vision for a better messenger became Slack.
- The user enters in tasks and parameters including time required, whether it should be split up over time, how early before the due date its work should begin, etc.
- The application automatically optimizes your day's schedule. It resorts the schedule when you need more or less time on a task or a new task arises. It would be very powerful and show you how early you need to start working on things - nothing currently does this. It accounts for location, driving, eating.
- For example, the user can specify her need to do laundry every other week, but while she is doing laundry, she can exercise, but will need to shower. The program suggests loading washer -> exercise -> load dryer -> shower -> unload dryer.

- The pain and anxiety of missing a fruitful opportunity is far greater and longer lasting than the losses of a failed attempt. Employees and investors agonize more after learning they missed a great opportunity than when suffering the losses of a failed bet.
- This is true for employee recruitment and fundraising.
- Furthermore, I will go mad if someone else succeeds with the same tech I am building. It would be the biggest missed opportunity of my life. Hence, this is another reason urging its completion.

- Searching music is an excellent idea. Everyone uses it, and it is all structured data, and you know what you are looking for. Keyword search is ill-fit. "Song by ARTIST last year", "Music video for SONG". I would like to launch using a public music database.
- Could possibly include lyrics, search them and highlight the match, but the returned result/suggestions is song name. Best to avoid this because it is overly complex and distracting.
- Examining Clearbit, their forthcoming Company Search API, using Elasticsearch, is designed for nearly identical queries as my system. Their Company Name Autocomplete is the same as my system.
- I would like to be able to enter a company's URL and get the company as a result. This would be a similar implementation as looking up songs by lyrics.

- I need to focus on the future, otherwise present turmoil is all there is to matter. I need long-term goals in order to make sacrifices in the present. That is how I succeeded in school: I was looking toward the future.
- The focus on the future was the source of confidence in everything I did, every minute: talking to people, interacting, participating; anything that made me vulnerable. My performance was stronger in every regard.
- Fake it (the beliefs) until you become it (habituate the confident behavior and performance).

- Elasticsearch is exciting, powerful, and useful. It handles suggestions based on misspellings (including phonetic similarity). It also might provide a string-match score we can use can for costs.
- Creating language models will not be that difficult, if we generate possible queries in the grammar, as long as we use smoothing parameters. And I'm confident Elasticsearch can use the language models for suggestions and provide appropriate weights.
- This will be awesome, and we will start with music data.

- Seeing Alex Maccaw (Clearbit) star a GitHub repo of nlp resources for Ruby scares me.

- Sam Altman: "The most impressive people I know spent their time with their head down getting shit done for a long, long time. You can skip all the parties, all the conferences, all the press, all the tweets. Build a great product and get users and win."

- I am considering writing to Alex Maccaw. If I could get a job at this amazing place with amazing people, I would learn so much and be better positioned. However, I won't be able to finish my project. I won't be able to try and sell it. I won't be able to make a name for myself. I could ask to join after I finish, but the earlier I join the better: I will be part of the beginning helping build it as opposed to another employee coming on later. I would be giving up a chance to sell my project. If what you have is valuable, approach your offering in the context of M&A.

- "Making something among the best in the world is at least 1.5 orders of magnitude more work than what most sane people consider reasonable." - Dustin Curtis. Applies exactly to my work.

- It is insanely fast.

- No overnight success. To become as good as I aspire, it will take a long time. If I continue working at the pace that I have over past weekend, it will be incredible.

- It might be better to start with data for companies, like what Clearbit uses. It will appear as a more legitimate venture with application.

- I am now committing code far, far more often. It is better for organization, having versions to restore to, and maintaining current work. I wish I did this earlier, where I would commit 20 hours worth of work at a time. If I understood this at the beginning, I would have 5x the 490 commits I have now.

- Throughout all of this work, I did not know what I was doing. Not only was I unfamiliar with the domain, I did not know the domain existed. I did not know I was creating a shift-reduce parser just for the semantics.

- I am developing this such that there are enormous fixed costs (solving everything, implementing all possible features, building all the tools and checks, making it incredibly fast), creating very low marginal costs for expanding the features (by expanding grammar + DB). This is not intrinsic in the interface's nature, but by how I developed it (i.e., a similar technology developed by others would almost certainly have a small fraction of this foundation). This enables me to move extremely fast later.

- I remember watching obscure presentations by university professors on advanced parsing techniques, and looking through every paper I could find on the subject, full of Greek symbols.

- Search as a service. Infrastructure for software developers, like payments.
- You store an index of your data on my server. (Not the data itself, just the metadata)
- You design grammar for your data. It will inevitably use query-forms I already created. More than just a template. Almost as simple as choosing from a list of queries and replacing verbs (“like, star, post”) and nouns (“tweets, repos (git), songs). And, of course, this handles everything → automatically creating all possible forms ("Brian’s repos", "repos created by Brian", "repos that were made by Brian", "repos of Brian's").
- 2 problems:
	1. There is an extra hop, which can add >50 ms, which is difficult because the system much be magically instant as you type:
		product-hunt-site → product-hunt-server → my-server → product-hunt-server → product-hunt-site
		v.s.
		my-site → my-server → my-site
	2. Customers need constantly update an index on someone else's server. This is okay for some stuff, like Product Hunt, or public GitHub repos. But Dropbox could never post their user's metadata on my servers - privacy concerns.
- Unknown portion: There are two requests that can occur:
	1. The user inputs a query → send to my server to parse and display list of results.
	2. The user chose a result/suggestion → execute that search (which is a very complex search with logic operators) and return a list of matches for a search results page.
- The customer (Product Hunt), might want to do the second part themselves. They could, no stopping them. Just, a little weird they can use half of your service on not the other half.
- Except, the third feature (above is (1) and (2)) is on the search results page, you see a table/box of all of the filters/parameters of your search, and you can click to modify any of them.
- Product Hunt could do this and their users would love it. GitHub could do it too and their users would love it. Sites that would pay for this are not consumer-focused businesses. They are sites that cater to people who would use complex queries.
- Hence, nearly 1% of people would use this on Twitter. However, professionals who use Twitter for advertising and market research would use my program. Twitter has many tools accessible to anyone (e.g., 'analytics.twitter.com'), but this same <1% of users use these tools.
- Problem: Any startup would use AWS. It is an essential cost. Any startup would use Stripe. It is just % cut of your revenue. But, this search as a service is just a unessential additional expense. No software/service has ever struggled yet with average keyword based search.
- The only possible customers are well established tech services (Product Hunt, GitHub, Box, several security services selling to the enterprise) who would use this for their large and well developed software. They would use it to make their customers additionally happy and add extra value to their product.
- But, you look at Dropbox doing much work to add extra features for their enterprise customers (administrative controls, etc).
- Second big problem: Many of these customers, if not all, would require full-text search: searching Dropbox documents, searching GitHub code, etc. My program cannot do that, because it means it would need your database. (That, or I open source the software that you run on your servers, and I charge for support services like many database companies do.)

- I absolutely love Patrick Crowley. He reminds me of Mark Benioff. He is so kind, honest, giving, caring, smart, confident. He is humble and appears incredibly in control. I am so thankful I met him.

- It always bothered me when startups, markets, or industries are described as "sexy". I was so thrown off guard when I first heard it.

- Refer to Apple's language in videos and promotional copy: "While the way you use 3D Touch is simple, the engineering behind it is some of our most advanced."

- An incredible, amazing name is very important: "Live Photos shows how an idea and a good name is much more important than underlying technology."

- Sam Altman encapsulates what I am doing: "If you want to be a long-term success, build a great product. If you want to be a short-term success, build a great growth hack. Although, to be fair, a great product that people tell their friends about is the best growth hack."
- "The most valuable paths usually involve not being rich for awhile." ~ Altman

- I am getting faster every day. I did work with multi-processing over the past few days (child processes, forks, etc.). I learned and can now think, design, and develop with these tools ever faster. I keep learning more git features, proper wording for documentation and comments, command line argument parsing, project organization, asynchronous functions, and more.
- I will be able to act on ideas faster. I will be able to try out ideas and different implementations faster.

- Spending 3 hours testing every Node package for command line argument parsing seemed like a mistake at the time. As did spending hours more perfecting an implementation of command line argument parsing. Nevertheless, I now have 8 command line programs using what I learned. These command line interfaces will be essential for the server as well.

- I spent a total of two weeks working on the ambiguity checker. It seemed like wasted time when done, because it barely improves the core project. But I learned many ways to improve performance: using linked lists instead of copying to avoid mutation of shared arrays (huge improvement), and defining all object properties at instantiation. Still, I thought that was not enough. Now, I see the ambiguity checker can be applied to insertions (i.e., preventing insertions that will create trees we know will be rejected for having identical semantics to other trees). This turns out to be essential.
- Also benefited by skill development due to the algorithmic difficulty.
- Again, I did not understand the value at the time, but it was time well spent.

- I learned about git branches, merging, remotes, and more by doing GitHub pull requests.
- I learned about process management by implementing child processes in the cli. That work also lead to enormous advancement of the project's organization and aspects that will be employed by the server.
- Again, all of this time ended up being well spent despite my initial impression.

- All of the pain, struggle, and poison in my mind during the end of university and through the summer existed for me to learn a lot, mature, endure, experience, and gain wisdom for my future. They were necessary and extremely valuable.

- The ambiguity checker was a massive undertaking. All cases of possible ambiguity were documented in detail. Many algorithms were created and ensured to catch all possible ambiguous cases. Several algorithms and unique data structures were developed and heuristics developed to make the construction of all possible paths and the comparison of paths as fast as possible. Many trials and errors. It was over 100 hours of work.

- Everything needs to be absolutely instant. The whole web page needs to be loaded in < 100 ms. Like Hacker News and Daring Fireball. It needs to be the site people check to determine if they are connected to the Internet.
- No animations. No UI frameworks. No styling. As default as possible. Anything more is superfluous.

- I've had tragedies and I will have triumphs.

- I did more work on the ambiguity checker, a seemingly poor waste of time. However, I found more optimizations to apply to forest search, found an error in forest search, and simplified the forest search algorithm. Hence, it absolutely was time well spent.

- So many algorithms within algorithms. So many distinct modules each with complex behavior and operations that were enormous amounts of work to invent. Nothing was easy or straightforward. Everything has been made simple, organized masterfully, commented beautifully. Every single instruction was measured and variable name obsessed over. And refined, and thrown out and restarted, and tried and failed and succeeded.

- I am working and learning so much, so fast. I think, "Wow, when did I work on this?" and surprise myself to learn it was only two days ago. I keep finding more command line programs and tools developed over decades that remain just as useful and applicable today. I am amazed by `git-blame`, `diffstat`, and many more. I am able to ever faster solve and implement many algorithmic operations and functions.

- The project is so detailed, complex, meticulously thought out, agonized over, and trialled + failed + trialled, that the commit summaries alone contain content fit for computer science publications.

- I wake at 5:00am, sometimes earlier. I arrive at 6:00am, sometimes earlier. I leave close to 10pm. I average 14 hours a day, every day of the week. I am building stamina.

- The difference in power + complexity between my system and the NLP in Siri, for example, is at least 4:1. They simply must parse for certain words in a certain order, ignoring noise, which maps to a single, simple non-nested command, and all text generation (Siri's feedback) is pre-written with placeholders for things like names. Mine, in contrast, is much faster, outputs k matches, generates text, handles and inspects conjugation, morphology, and syntax, and handles infinitely complex semantics.
- This is not a problem! They are for different jobs, of course! I am just noting the difficultly of what I am building.

- The work on the ambiguity checker, which we originally thought was a waste of time, continues to bear fruit.

- I have become much faster at articulating comments and commit descriptions in detail.

- I continue to grow faster at implementing complex changes affecting many modules, algorithms and data structures, etc.

- How I learn: "The 1910 [Flexner] Report emphasized experience oriented methods of teaching and denigrated the early traditional didactic and mental disciplinary methods. Flexner further stressed the investigative process or inquiry as a method of promoting critical thinking. Through inquiry as a model of reflective thinking the traditional fundamental sciences would be rendered dynamic establishing organic connection to real world experience." ~ Zelenka

- There are three potential products: (1) searching users' third-party services (e.g., email, Dropbox, social network accounts), (2) searching highly structured public datasets (e.g., music, places, financial data, people), (3) an API for search as a service.
- I cannot experiment with the product until I finish the core technology.

- Much time and effort is spent designing and building the system that enables me to build the product: grammar generator and all the rule functions, etc, ambiguity checker, CLI, benchmarker, test suite, etc. It is a product itself. Just as Tesla sees the Gigafactory as a product itself which enables other products. Or Google's infrastructure. Even Apple's processes, i.e., how it operates, is a product of profound work (e.g., Apple University), but its existence is secret.

- Peer pressure, everyone's impression of me, motivates me enormously for everything I do. As it has been my whole life. So true is it now, working on this.
- My goodness, I must admit, it is driving me mad. Yes, I want to awe all those from my past: the friends who betrayed me, the girls who denied me, the business kids who laughed at me. It has been obsessive, and my memories are painful and chronic. Working on this, alone, non-stop, with no new experiences to occupy my mind, leaves only memories to hijack my attention.

- In actuality, I began focusing on the startup 2.5 months ago. Until then, it was preceded by "but": I am doing X, but continuing to work on the startup. Now it is my focus. No distractions.

- Startups are all about not dieing; i.e., not giving up. That is my skill: working relentlessly, never quitting.

- Winning over people is all about your ability to express yourself and personality. And success is all about winning over people. Hence, the company and brand needs personality and humanism.

- I did not realize this was a startup, so I did not understand that my pains were normal, necessary, and validating.

- This work, and the paramount occupation each day, is the most emotionally taxing endeavor of my life. For months I have been drowning in chronically recurring memories of the past, because my work prevents new experiences from replacing those memories' recency.

- Never underestimate the value of removing friction.

- There are often clear and obvious ways to implement features or changes, but I must stop and assess them extraordinarily carefully to consider future features and extensions. It is necessary to ensure a strong foundation and that the system's algorithms are elegant, completely understood, and meticulously designed.

- I put so much effort and care into the documentation of algorithms. I revise them and tweak them over months. The descriptions and explanations are comparable in quality, detail, and precision to computer science or mathematics papers published in journals.

- Idea: whatever implementation we try, make it free for consumers and charge for businesses. Or, make a consumer version that does not even require an account.

- Principle: no settings/preferences of any kind. It should always work, instantly, with no need, room, or desire for configuration.

- Important distinction: this will be multiple orders easier, faster, adaptable, and accessible than any related tool.

- My code is some of the most beautiful code you will ever see. Variable names, abstractions, module design, and comments, comments, and comments are all refined over and over toward perfection.

- The system embodies the following excerpts from Paul Graham's "Hackers and Painters":
	- Empathy is probably the single most important difference between a good hacker and a great one. Some hackers are quite smart, but when it comes to empathy are practically solipsists. It's hard for such people to design great software [5], because they can't see things from the user's point of view.
	- Part of what software has to do is explain itself. So to write good software you have to understand how little users understand. They're going to walk up to the software with no preparation, and it had better do what they guess it will, because they're not going to read the manual.

- I love when completing a large, complex program, I can sit back and admire its beauty like a beautiful drawing. You are aware of the process, from the beginning sketches to the final refinements.

- Important tot think about this point from Ben Thompson:
	- The fundamental nature of the Internet makes monetizing infinitely reproducible intellectual property akin to selling ice to an Eskimo: it can be done, but it better be some really darn incredible ice, and even then the market is limited. A far more attainable and sustainable strategy is to instead focus on monetizing complements to said intellectual property, resulting in an outcome where everyone wins: intellectual property consumers, intellectual property copiers, and above all intellectual property creators.
- Stripe's complement is scale.
- I cannot be a pure software service. At first I might be able to, but from the beginning must be working toward a complement.

- I long believed I would go to SV. I was not excited about it, but simply thought it was the logical step. I wanted to be around those I admire, and see the companies I admire, but still lacked a natural desire to go. Largely, I don't want to be another 20-something male programmer talking about startups. That is everyone there.
- Then I realized, how about NYC? It is amazing, diverse, cold. It is amazing. The arts. Theater. So so so so much culture. I am actually excited about it, and I don't know why. I never was excited about SV. I have never been to SV, though I just don't have desire to go there.
- I have a sense, an institution, that NYC is the correct place to go. I can never imagine meeting people in SV; that is, random people like I did at school. But I can imagine it easily in NYC. The idea feels so much better. I do not know where to go in NYC, though, but still want to.
- I finally have something to look forward to. I can't remember when I was last excited about something in my future. Perhaps junior year of university when I imagined having a successful startup while in school. That was last future I looked forward to.
- NYC just feels so right.
- When I think about how I want to study humanities, economics, Shakespeare, violin, etc., how I want to be diverse - SV doesn't make any sense. SV is like suburbia, all full of the same upper class young tech people. But NYC has everything and everybody. I will meet people just like at school.
- One of the depressing aspects about school ending was I could not envision such a life recurring; but that can happen in NYC. Everyone is so close.

- At university, I was incredibly productive when using this project to avoid school work. I accomplished enormous amounts, and solved many difficult problems, in the hours leading up to exams I had yet to study for. Even when exhausted, and with a deadline hours away, I made breakthroughs out of some procrastinatory force.
- While sitting in computer science lectures, I would grow immensely eager to run out and code. Simply the sight of pseudo code or explanations of algorithms made me crave coding. The lecture's subject was irrelevant; the idea alone of code invigorated me.

- I have always strove to focus. Throughout university, I discarded extracurricular activities. I defaulted to the library for every waking hour. All I did was work, read, and code. I declined social invitations and was the fastest walker on campus. Every day for lunch, I raced from the library to a dining hall, ordered and ate a double cheeseburger, and would race back. 17 minutes RTT. A resume did not concern me because I believed I was optimizing for the greatest growth of my knowledge, insight, and skills. I believed I was learning more, growing more, and diversifying my education far more than I ever would if I had prioritized school work. There were no inner conflicts because I made the explicit decision in my mind that my independent work and study had a far greater ROI. I completely abstained from distractions instead of moderating.

- Do not attempt to innovate management. It is not worth the risk or time, especially when you lack experience. Time is fundamentally the most constrained resource. Tech is changing, but people are not. The default in a large organization is to trust the mechanism.

- Need to make a product that becomes a part of people's daily lives, in the way really successful companies always have to.

- The emotional difference between "hitting your head against the wall" and successfully solving challenges and progressing is that of hopelessness and rapture.

- One of the many goals is Turing completeness.

- The amount of detail and depth that had to be explored to achieve support for unions was gargantuan. Dozens of components are designed in this intricate system, in far-from-obvious ways, to successfully operate together perfectly.
- The intricacy of this system's numerous moving parts is awesome.

- There is an additional challenge beyond the technical challenge. The challenge of living the life and enduring the stress of the work to cultivate and maintain a mental state essential for tackling the technical challenge. Id est, how to maintain confidence and interest, yet not despair or falter upon roadblocks.

- Must deliver a superior experience beginning at the high end and work down market until I have aggregated consumer, thereby gaining leverage over suppliers and the potential to make outsized profits.

- If this becomes a service, can begin by personally and manually creating the grammars for my customers. ("Do things that don't scale.")

- My work's quality is far better than the most well funded organizations with teams of experienced, well-payed designers, engineers, and management. Without a doubt, the quality of my work and the user experience trumps everything else.

- Need to build a product that becomes a part of users' daily lives in the way really successful companies always have to.

- I recall examining several CS papers and books on pushdown automata, LR(k) parsing, graph search, etc. I recall watching obscure talks and emailing authors of papers (for which I received no responses).

- This system is enormously beyond achieving the intended results. It is beyond seemingly working properly. Rather, it is striving for perfection. It will be a solid foundation that we can have confidence is absolutely correct and handles every edge case. Small parts, such as person-number agreement conjugation, we *know* we cracked as the correct solution. As if every aspect has a mathematically correct implementation we need to solve.

- By perfecting before launch, we can work on edge cases that could not be addressed otherwise. We can perfect a foundation to enable moving faster later. Our product will be much better, and at a state competitors will not be able to match because they too will not have the necessary time and incentives.

- Fantastic search interfaces are a great deal of work. A UI Yelp, Product Hunt, et. al. needs is an enormous amount of work. However, Dropbox, Box, and others would also need full-text search.

- Launch with Twitter support. People could use it, however little utility it offers. It is fun. I even want it on a weekly basis (when looking for specific tweets)!
- Jack says, "I love Twitter search. Enables me to quickly see what people are saying in the world about any topic, event, person, or brand. And we have an interesting way to bubble up trends which goes into a fast search."
- Jack would appreciate it.